package com.scareers.gui.ths.simulation.strategy.stockselector;

import cn.hutool.log.Log;
import com.scareers.utils.log.LogUtil;

import java.util.Arrays;
import java.util.List;

/**
 * description: 手动选股, 也可做模拟测试用
 *
 * @author: admin
 * @date: 2022/2/25/025-20:18:53
 */
public class LbHsSelectorManual extends LbHsSelector {
    List<String> result = Arrays.asList("000001", "000007");

    @Override
    public List<Double> getTicksOfLowBuy() {
        return Arrays.asList(
                0.11, 0.105, 0.1, 0.095, 0.09, 0.085, 0.08, 0.075, 0.07, 0.065, 0.06, 0.055, 0.05, 0.045, 0.04, 0.035,
                0.03, 0.025, 0.02, 0.015, 0.01, 0.005, 0.0, -0.005, -0.01, -0.015, -0.02, -0.025, -0.03, -0.035, -0.04,
                -0.045, -0.05, -0.055, -0.06, -0.065, -0.07, -0.075, -0.08, -0.085, -0.09, -0.095, -0.1, -0.105
        );
    }

    @Override
    public List<Double> getTicksOfHighSell() {
        return Arrays.asList(-0.215, -0.21, -0.205, -0.2, -0.195, -0.19, -0.185, -0.18, -0.175, -0.17, -0.165, -0.16
                , -0.155, -0.15, -0.145, -0.14, -0.135, -0.13, -0.125, -0.12, -0.115, -0.11, -0.105, -0.1, -0.095,
                -0.09, -0.085, -0.08, -0.075, -0.07, -0.065, -0.06, -0.055, -0.05, -0.045, -0.04, -0.035, -0.03, -0.025,
                -0.02, -0.015, -0.01, -0.005, 0.0, 0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05,
                0.055, 0.06, 0.065, 0.07, 0.075, 0.08, 0.085, 0.09, 0.095, 0.1, 0.105, 0.11, 0.115, 0.12, 0.125, 0.13,
                0.135, 0.14, 0.145, 0.15, 0.155, 0.16, 0.165, 0.17, 0.175, 0.18, 0.185, 0.19, 0.195, 0.2, 0.205, 0.21,
                0.215, 0.22);
    }

    @Override
    public List<Double> getWeightsOfLowBuy() {
        return Arrays.asList(
                0.0, 9.335394847851413E-4, 7.714751065596492E-4, 0.0, 0.0, 0.0, 0.0, 7.408158718598109E-4, 0.0,
                9.335394847851413E-4, 0.0, 0.001498890949330784, 9.335394847851413E-4, 9.335394847851413E-4,
                0.002800618454355424, 0.0037341579391405653, 0.006136402432854306, 0.00713336828535109,
                0.012299604923885966, 0.02656637353636347, 0.020912497054644714, 0.029789146061050077,
                0.05732719780035994, 0.05900477993330097, 0.05930119658139872, 0.08212796541602832, 0.06298478830742392,
                0.07218419725740273, 0.0641100908617876, 0.05389031681412494, 0.06960475668581828, 0.037276372280552694,
                0.03722922648808158, 0.03861385955272624, 0.024439973803701723, 0.024461258671322834,
                0.024911385283641643, 0.019508919597636815, 0.014377720661148724, 0.013487767145854443,
                0.011315681200481367, 0.030984803276659294, 0.026740233826010817, 0.0
        );
    }

    @Override
    public List<Double> getWeightsOfHighSell() {
        return Arrays.asList(
                0.0, 0.0, 0.0, 0.0, 0.0, 5.396401967896302E-4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                5.396401967896302E-4, 0.0, 0.0, 0.0, 0.0, 7.41827909519617E-4, 5.396401967896302E-4, 0.0,
                7.680536315710721E-4, 8.613245037375458E-4, 2.2841343478144192E-4, 0.0011926418555407068,
                0.0022652245679946155, 0.0016189205903688905, 0.0018472118164356442, 9.860095214127866E-4,
                0.0019563730744285336, 0.00415137271114886, 0.002812386945994079, 0.00457163852243525,
                0.007550334426885296, 0.01391600935046421, 0.011990257917532615, 0.015422353160718511,
                0.013370021600061375, 0.01756068116200005, 0.017573395098905584, 0.01632561006556233,
                0.026987198354197002, 0.02634623142624434, 0.02692061216820997, 0.030351225778125393,
                0.028773301105058796, 0.031451181544069014, 0.030470624850910233, 0.032591390579480614,
                0.0401283110201414, 0.03167327757153577, 0.02774246711320957, 0.03563622534574853, 0.034975205453396004,
                0.03410844477653338, 0.03327210359555703, 0.033139202018725326, 0.026423296234725984,
                0.02860457451508382, 0.015163809490408148, 0.021843208809649056, 0.025253310374327695,
                0.016521469964291234, 0.0180324716959575, 0.011948698572704142, 0.012000657849709906,
                0.01406252521056291, 0.015304427322225523, 0.00894377694620264, 0.01184191258315336,
                0.00972929171932507, 0.0092392355310991, 0.008714681207418723, 0.008079517078735199,
                0.00665007359642915, 0.005506001112462289, 0.005705253461462383, 0.0033572155662410213,
                0.005274652313950953, 0.0038736876134237777, 0.008836022568033411, 0.00410210104820522,
                0.003237841180737781, 0.017630101580557174, 0.030224199693906578, 0.0

        );
    }

    @Override
    public List<Double> getCdfOfLowBuy() {
        return Arrays.asList(
                0.0, 9.335394847851413E-4, 0.0017050145913447905, 0.0017050145913447905, 0.0017050145913447905,
                0.0017050145913447905, 0.0017050145913447905, 0.0024458304632046014, 0.0024458304632046014,
                0.003379369947989743, 0.003379369947989743, 0.004878260897320527, 0.005811800382105668,
                0.0067453398668908095, 0.009545958321246233, 0.013280116260386799, 0.019416518693241104,
                0.026549886978592195, 0.03884949190247816, 0.06541586543884163, 0.08632836249348635,
                0.11611750855453642, 0.17344470635489637, 0.23244948628819734, 0.29175068286959605, 0.37387864828562434,
                0.43686343659304827, 0.509047633850451, 0.5731577247122386, 0.6270480415263635, 0.6966527982121817,
                0.7339291704927344, 0.771158396980816, 0.8097722565335422, 0.834212230337244, 0.8586734890085669,
                0.8835848742922086, 0.9030937938898453, 0.9174715145509941, 0.9309592816968485, 0.9422749628973298,
                0.9732597661739891, 1.0, 1.0

        );
    }

    @Override
    public List<Double> getCdfOfHighSell() {
        return Arrays.asList(
                0.0, 0.0, 0.0, 0.0, 0.0, 5.396401967896302E-4, 5.396401967896302E-4, 5.396401967896302E-4,
                5.396401967896302E-4, 5.396401967896302E-4, 5.396401967896302E-4, 5.396401967896302E-4,
                5.396401967896302E-4, 5.396401967896302E-4, 5.396401967896302E-4, 0.0010792803935792605,
                0.0010792803935792605, 0.0010792803935792605, 0.0010792803935792605, 0.0010792803935792605,
                0.0018211083030988775, 0.0023607484998885075, 0.0023607484998885075, 0.0031288021314595797,
                0.003990126635197126, 0.004218540069978568, 0.005411181925519275, 0.0076764064935138905,
                0.009295327083882782, 0.011142538900318426, 0.012128548421731212, 0.014084921496159745,
                0.018236294207308604, 0.021048681153302683, 0.025620319675737933, 0.03317065410262323,
                0.04708666345308744, 0.05907692137062006, 0.07449927453133857, 0.08786929613139995, 0.10542997729339999,
                0.12300337239230558, 0.1393289824578679, 0.1663161808120649, 0.19266241223830924, 0.21958302440651922,
                0.2499342501846446, 0.27870755128970337, 0.3101587328337724, 0.3406293576846826, 0.37322074826416324,
                0.41334905928430465, 0.4450223368558404, 0.47276480396904996, 0.5084010293147985, 0.5433762347681945,
                0.5774846795447279, 0.6107567831402849, 0.6438959851590103, 0.6703192813937362, 0.69892385590882,
                0.7140876653992282, 0.7359308742088773, 0.7611841845832049, 0.7777056545474962, 0.7957381262434536,
                0.8076868248161577, 0.8196874826658677, 0.8337500078764306, 0.8490544351986561, 0.8579982121448587,
                0.8698401247280121, 0.8795694164473371, 0.8888086519784362, 0.8975233331858549, 0.9056028502645901,
                0.9122529238610192, 0.9177589249734814, 0.9234641784349438, 0.9268213940011848, 0.9320960463151358,
                0.9359697339285595, 0.9448057564965929, 0.9489078575447981, 0.9521456987255359, 0.9697758003060931,
                0.9999999999999997, 0.9999999999999997

        );
    }

    @Override
    public void selectStock() throws Exception {
        log.warn("已选股");
    }

    private static final Log log = LogUtil.getLogger();

    @Override
    public List<String> getSelectResults() throws Exception {
        return result;
    }

    @Override
    public void resetSelectResults() throws Exception {
        result = null;
    }
}
